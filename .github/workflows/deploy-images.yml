# ========================================================================
# WORKFLOW: CI/CD Pipeline - Docker Images Build & Deploy
# ========================================================================
# Ce workflow:
# 1. Détecte les secrets (Gitleaks)
# 2. Analyse le code (CodeQL & SAST)
# 3. Valide le code source (formatting, linting)
# 4. Exécute les tests automatisés
# 5. Construit et publie les images Docker sur GitHub Container Registry
# 6. Scan de sécurité des images Docker
# ========================================================================

name: CI/CD Pipeline - Docker Images

# Déclencheurs
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

# Variables d'environnement globales pour le registre Docker
env:
  REGISTRY: ghcr.io # GitHub Container Registry
  REPOSITORY: ${{ github.repository }}

jobs:
  # ======== JOB 1: DÉTECTION DE SECRETS ========
  secret-scanning:
    name: Secret Detection (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Récupère tout l'historique pour l'analyse complète

      # Scan des secrets avec Gitleaks
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optionnel pour la version Pro

      # Upload des résultats en cas de détection
      - name: Upload Gitleaks results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 30

  # ======== JOB 2: ANALYSE DE CODE CODEQL ========
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Initialise CodeQL
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality # Utilise les requêtes de sécurité

      # Analyse automatique pour JavaScript
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      # Exécute l'analyse CodeQL
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}'

  # ======== JOB 3: ANALYSE STATIQUE (SAST) ========
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Installation des dépendances pour l'analyse
      - name: Install dependencies
        run: npm install

      # Audit de sécurité npm
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      # Analyse ESLint avec focus sécurité
      - name: Run ESLint security check
        run: npm run lint
        continue-on-error: true

      # Snyk pour analyse de vulnérabilités (optionnel, nécessite SNYK_TOKEN)
      - name: Run Snyk security scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # ======== JOB 4: VALIDATION DU CODE ========
  validate:
    name: Format and Lint
    needs: [secret-scanning, codeql-analysis, sast-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Utilisation de Node.js v20 LTS

      # Installation des dépendances racine (ESLint, Prettier, etc.)
      - name: Install dependencies
        run: npm install

      # Vérification du formatage avec Prettier
      - name: Check formatting
        run: npm run format:check

      # Vérification des règles de code avec ESLint
      - name: Verify linting
        run: npm run lint

  # ======== JOB 5: TESTS AUTOMATISÉS ========
  test:
    name: Run API Tests
    needs: validate # Ne démarre que si la validation réussit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Installation des dépendances racine
      - name: Install dependencies
        run: npm install

      # Installation des dépendances spécifiques à l'API
      - name: Install API dependencies
        working-directory: ./api
        run: npm install

      # Exécution des tests unitaires et d'intégration
      - name: Run API tests
        working-directory: ./api
        run: npm test

      # Upload des résultats de tests
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-results
          path: api/coverage/
          retention-days: 30

  # ======== JOB 6: BUILD ET PUSH DES IMAGES DOCKER ========
  build-and-push-images:
    needs: [validate, test] # Ne démarre que si validation et tests réussissent
    runs-on: ubuntu-latest
    permissions:
      contents: read # Accès en lecture au repo
      packages: write # Autorisation d'écriture pour publier les images

    # Stratégie matrix pour construire plusieurs images en parallèle
    strategy:
      matrix:
        service: [api, thread, sender] # Liste des services à construire
        include:
          - service: api
            context: ./api # Contexte de build pour API
          - service: thread
            context: ./thread # Contexte de build pour Thread
          - service: sender
            context: ./sender # Contexte de build pour Sender

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Authentification au GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extraction du hash court du commit pour les tags d'image
      - name: Extract commit short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Configuration de Docker Buildx pour construction multi-plateforme
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Conversion du nom du repo en minuscules (requis par ghcr.io)
      - name: Convert repository name to lowercase
        id: repo_name
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Construction et publication de l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }} # Utilise le contexte spécifique au service
          push: true # Publie l'image sur le registre
          tags: |
            ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.REPO_NAME }}/${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.REPO_NAME }}/${{ matrix.service }}:${{ steps.sha.outputs.SHORT_SHA }}
          cache-from: type=gha # Utilise le cache GitHub Actions pour accélérer les builds
          cache-to: type=gha,mode=max

      # Scan de sécurité de l'image Docker avec Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.REPO_NAME }}/${{ matrix.service }}:${{ steps.sha.outputs.SHORT_SHA }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
        continue-on-error: true

      # Upload des résultats Trivy vers GitHub Security
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'
        continue-on-error: true
