# ========================================================================
# WORKFLOW: Creation et publication des images Docker
# ========================================================================
# Ce workflow:
# 1. Valide le code source (formatting, linting)
# 2. Exécute les tests automatisés
# 3. Construit et publie les images Docker sur GitHub Container Registry
# ========================================================================

name: Create and publish Docker images

# Déclencheur: exécution uniquement sur push dans la branche develop
# pour éviter les builds redondants lors des PR vers main
on:
  push:
    branches:
      - develop

# Variables d'environnement globales pour le registre Docker
env:
  REGISTRY: ghcr.io # GitHub Container Registry
  REPOSITORY: ${{ github.repository }}

jobs:
  # ======== JOB 1: VALIDATION DU CODE ========
  validate:
    name: Format and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Utilisation de Node.js v20 LTS

      # Installation des dépendances racine (ESLint, Prettier, etc.)
      - name: Install dependencies
        run: npm install

      # Vérification du formatage avec Prettier
      - name: Check formatting
        run: npm run format:check

      # Vérification des règles de code avec ESLint
      - name: Verify linting
        run: npm run lint

  # ======== JOB 2: TESTS AUTOMATISÉS ========
  test:
    name: Run API Tests
    needs: validate # Ne démarre que si la validation réussit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Installation des dépendances racine
      - name: Install dependencies
        run: npm install

      # Installation des dépendances spécifiques à l'API
      - name: Install API dependencies
        working-directory: ./api
        run: npm install

      # Exécution des tests unitaires et d'intégration
      - name: Run API tests
        working-directory: ./api
        run: npm test

  # ======== JOB 3: BUILD ET PUSH DES IMAGES DOCKER ========
  build-and-push-images:
    needs: [validate, test] # Ne démarre que si validation et tests réussissent
    runs-on: ubuntu-latest
    permissions:
      contents: read # Accès en lecture au repo
      packages: write # Autorisation d'écriture pour publier les images

    # Stratégie matrix pour construire plusieurs images en parallèle
    strategy:
      matrix:
        service: [api, thread, sender] # Liste des services à construire
        include:
          - service: api
            context: ./api # Contexte de build pour API
          - service: thread
            context: ./thread # Contexte de build pour Thread
          - service: sender
            context: ./sender # Contexte de build pour Sender

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Authentification au GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extraction du hash court du commit pour les tags d'image
      - name: Extract commit short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Configuration de Docker Buildx pour construction multi-plateforme
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Conversion du nom du repo en minuscules (requis par ghcr.io)
      - name: Convert repository name to lowercase
        id: repo_name
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Construction et publication de l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }} # Utilise le contexte spécifique au service
          push: true # Publie l'image sur le registre
          tags: |
            ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.REPO_NAME }}/${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.REPO_NAME }}/${{ matrix.service }}:${{ steps.sha.outputs.SHORT_SHA }}
          cache-from: type=gha # Utilise le cache GitHub Actions pour accélérer les builds
          cache-to: type=gha,mode=max
